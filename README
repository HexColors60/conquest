
         +--------------------------------------------------------+
         |  CCC    OOO   N   N   QQQ   U   U  EEEEE   SSSS  TTTTT |
         | C   C  O   O  NN  N  Q   Q  U   U  E      S        T   |
         | C      O   O  N N N  Q   Q  U   U  EEE     SSS     T   |
         | C   C  O   O  N  NN  Q  Q   U   U  E          S    T   |
         |  CCC    OOO   N   N   QQ Q   UUU   EEEEE  SSSS     T   |
         +--------------------------------------------------------+


	This file contains various misc stuff about Conquest.  See
INSTALL for instructions on unpacking, compiling, and running
counquest. See conqnews.doc for the lastest news and modification
history.  See conquest.doc for information on available commands, and
how to play the game.


### CONQUEST SYNOPSIS

	Here's an extract from the conquest.doc file:

          NAME
               Conquest  -  a multi-player real-time screen-oriented 
               space war game

          SYNOPSIS
               conquest

          DESCRIPTION


               1. OBJECT OF THE GAME.

               The object of the game is twofold. The  short-range  goal
               is  to accumulate "kills" by shooting down enemy players.
               You get one kill point for each  enemy  ship  shot  down,
               plus  some  extra  if  the enemy had kills too. The major
               weapon used to shoot down ships is the photon torpedo.

               The long-range goal is to conquer the universe  for  your
               team  by taking every planet. You take planets by killing
               off the enemy's armies via bombardment, and then  beaming
               your  team's  armies down. When all the planets have been
               taken, the game ends, a new game begins, and  the  player
               who  actually  took  the last planet gets his/her name up
               in lights.

               ...

	See conquest.doc (or use the (h)elp lesson from within Conquest)
for more information and available commands.


### A LITTLE BACKGROUND

	Conquest was originally written in Ratfor for the VAX/VMS
platform in 1983 by Jef Poskanzer and Craig Leres.  I wasted
incredible amounts of time playing this game with my friends in
the terminal labs at college, and when I actually had a multi-user
system running at home (Unixware) I decided to try and translate/port
the code to C in Unix.  While doing the port, I added several new
features including color and Fkey macro support, as well as many other
minor 'enhancements'.

	For those who played the original Conquest, you may notice
that cloaking is more usable, (though not *too* usable), torps have a
slightly longer range, the keypad can be used for 1-key steering, the
Conquest driver recovers almost immediately from a crash/kill, color
and macros are supported, and other small changes.  Where possible,
I've tried to keep the mechanics and balance of the game identical to
the original.  More tweakage should be expected though, as well as the
continuing removal of useless code.


### GENERAL INFORMATION AND TIPS ABOUT CONQUEST

## ~/.conquestrc

	After running Conquest for the first time, a file called
~/.conquestrc should have been created.  Look at this file (it's
self-explanatory) for various options you can set.  Conquest Gods (or
CG's) should look at /opt/conquest/etc/conquestrc for a few system
wide options you may or may not want.


## CURSES/TERMINFO

	See INSTALL for information on curses/terminfo requirements
and issues.  Additionally, some terminfo entries are supplied in the
ti/ subdirectory of the Conquest source distribution.  These are
described in INSTALL.


## THE INSTALLED FILES

	Here are the files installed by Conquest, and a brief synopsis
of what each does.  All paths are relative the the installation
directory (/opt/conquest by default).


# bin/conquest

	The game itself. It currently accepts no arguments.


# bin/conqdriv

	The universe driver process.  A driver is kicked off whenever
someone enters Conquest and a driver isn't already running.  You
cannot start the driver manually.  (You should never have to.)  A CG
can manually start the driver for debugging purposes by supplying the
'-f' option.


# bin/conqoper

	This is the Conquest Operator program that allows suitably
privileged individuals to control, monitor, and modify the behavior of
the game.  The root user is always a CG and therefore can run the
conqoper program.  If you want to allow other people to be CG's, you
will need to add them to the conquest group in /etc/group.

	My conquest entry in /etc/group looks like this:

conquest::102:jon,davep,johnc

	jon, davep, and johnc all have CG status on my machine.  

	Be careful who you give CG status to, a bad CG can cheat, or
otherwise disrupt a game.  In addition, due to the fact that a CG is a
member of the conquest group, a bad CG will be able to trash the
common block, as well as other undesirable things.

	A CG with permission to overwrite the system-wide conquestrc
file can call conqoper with the '-C' option to update the file with a
newer version.  User-level ~/.conquestrc files are always updated
automatically when conquest is run.  This is not done automatically
for the system wide conquestrc file due to potential security
problems. 


# bin/conqai

	Supplied with the source dist only.  This program allows a CG
to take over robot control from the Conquest driver for debugging
purposes.  Don't run it if you don't know what it does.  It will
disable robot AI control by the driver.  After running conqai for some
purpose, be sure to re-run it with the '-r' option to return control
of the robots to the Conquest driver when you're done.


# etc/conquest_common.img

	The Conquest (ex-Fortran) Common Block.  This file contains
the 'state' of the universe.  It is mapped into the address space
(using mmap(2)) of the Conquest executables.  Never manually edit this
file.  Use conqoper to change the universe. ;-) This file *must* have
perms of 660 with a group of conquest.  If read/write access is opened
up to all, then all will be able to modify the common block, and
hence, the universe.  Gives me the willies just thinking about it.


# etc/conqnews.doc

	Latest Conquest news.  View via (N)ews in the Conquest main
menu.  Contains a chronological order of changes and modifications.
Definitely worth viewing if you want to see what's changed since the
previous releases.


# etc/conquest.doc

	Conquest instructions and commands. View via (H)elp lesson in
the Conquest main menu.   You might also want to print this out.  The
last page contains a command summary - a handy reference for new
players. 


# etc/conquest.log

	Conquest's log file.  All errors/warnings, and debug messages
are written here.  For the source distribution, see the bottom of
defs.h for a list of debugables.


# etc/conquestrc

	System wide options.  Read it, it should be self explanitory.

# lib/libconquest.so

	Shared library used by Conquest executables (except FreeBSD).


# ~/.conquestrc

	User options and macro definitions.  


## THE ROBOTS


# CONQSTRAT

	The AI code used by the robot ships is the original strategy
table that was generated by the conqstrat.r program with the exception
of one new rule that lessens robot sun-deaths somewhat.

	The conqstrat program can be used to modify the Robot strategy
tables if you don't like the supplied rules.  You can have a maximum of
32 rules.  Conquest is supplied with a file called conqrule that
describes in a simplistic 'language' how a robot should behave under
certain conditions... You can edit this file, and use conqstrat to
generate a new conqdata.h file, or update the common block directly.

	For example, the following command parses the conqrule file
and updates the common block with the newly generated strategy table:

	conqstrat -U <conqrule

	NOTE: If someone then (I)nits the (r)obots via conqoper, your
changes will be overwritten.  In order for the changes to be
permanent, you will need to generate a conqdata.h file (described
below) and recompile and install Conquest.

	The following command will generate a new conqdata.h file.
You can then recompile Conquest to get the new default strategy
table.  After compiling and installing, remember to (I)nitialize the
(r)obots to update the common block copy of the strategy table with
the compiled in version. 

	conqstrat -o conqdata.h <conqrule
	make all
	make install


# COMBAT

	To new users, the robots may seem tough.  Gleefully harsh,
even.  But they are kinda stupid, and can be taken once you learn
their 'strategy'.  One thing to remember, NEVER attack one head-on
(let alone 2 or three...).  They are much faster on the trigger than
you are, and you'll probably lose.

	See the conqrule file supplied with the source distribution if
you want to see their basic strategies... That's cheating though ;-)
It was much more fun to figure it out via trial and error (death).


# CREATING ROBOTS

	Robots are created one of two ways:

	A.  You attack a home-system planet of an opposing team, and
there are no players around to defend it.  Presto, one pissed robot
headed your way.

	B.  A Conquest Operator (CG) fires up conqoper and creates some
with the (r)obot menu option.  


## CONQOPER 


# SEMAPHORE STATUS LINE

	The semaphore status line (line 2) in conqoper can give you
useful information on the locks used by Conquest to prevent
simultaneous writes to the common block.  The following is an example
line, labeled by the letters 'A'-'I' above it.

  A         B   C     D  E        F    G     H  I
  -         -   -     -  -        -    -     -  -
  MesgCnt = 268(25116:0) CmnCnt = 4693(25116:0) Last: Nov 28 13:10:38
	
KEY:	A. status for the messaging semaphore.  preceded by '*' if
	   currently locked
	B. number of semops on this semaphore
	C. PID of last process to alter this semaphore
	D. number of processes waiting for the semaphore to become
	   zero.  ie. the number of processes waiting to aquire a
	   lock.  This should be 0 99.9999% of the time.
	E. status for the common block semaphore (everything except
	   messages).
	F. number of semops on this semaphore
	G. PID of last process to alter this semaphore
	H. number of processes waiting for the semaphore to become
	   zero.  ie. the number of processes waiting to aquire a
	   lock.  This should be 0 99.9999% of the time.
	I. time and date of last semop.


# LEAVING A SCREEN IN CONQOPER

	When watching another ship in conqoper or editing a player or
planet, use 'q' to quit.

	In most other screens, you can use RETURN or SPACE to quit.  I
know... some consistency is needed.  


## PLANETS

	You cannot change the owner team for 'core' planets via
conqoper.  Core planets are those that need to be conquered in order
to take the universe.  The (?)planet list option in conqoper/conquest
will identify core planets with a '+' sign.  Currently, there are only
3 non-core planets, that while not necessary to conquer the universe,
can provide some strategic advantage.  These are Altair, Jinx, and
Hell.  Particularly Atlair.  Keep an eye on Altair ;-)

	Additionally, Conquest (as of V6.5) contains 20 extra planet
slots that can be configured with the planet edit option in conqoper.
By default, they are all 'turned off' so unless a CG goes into
conqoper and 'enables' them, you won't see them.  They are named
'Extra 1' through 'Extra 20'.

	Use them together.  Use them in peace.


## SUNS

	Suns are hot.  Don't fly through them unless it absolutely,
positively, has to be there overnight.  Hint: Robots don't seem to
worry about suns, sometimes to their detriment.  


## CLOAKING

	Cloaking can be very useful in battle.  Unfortunately, it's
expensive in terms of fuel and engine heating.  But at warp 0 however,
it can be very nice - sometimes.  There are ways of locating (at least
approximately) cloaked ships.  Really.  Two pople who know what
they're doing can get pretty damn good at triangulating cloaked
ships... right Dave?  Robots can't detect cloaked ships at warp 0.


## TRACTORS

	These don't seem to be really useful in Conquest.  One use
I've seen for them so far is to drag a helpless ship into the sun, so
it's death can be as humiliating as possible.  Actually, on second
thought, there *are* a few other interesting uses for them as well ;-)


## STRENGTH

	Different teams have different strengths.  Romulans have the
best weapons, but the worst engines.  Orions have the best engines and
the worst weapons.  The feds/klings are in-between.  The number of
kills your ship has determines how much more efficient your weapons
and engines are than the base efficiency you started out with.  When
your kills count reaches DOUBLE_E_KILLS (currently 40), your
efficiency will be double what you started out with.  It's very nice
to be in a ship with alot of kills.  The problem is, at least in our
games, we tend to attack whoever has the most kills - it's a wise move
for self preservation if the ship in question isn't on your team ;-)
Even if you have high kills, it's difficult to survive against the
continuous onslaught of a couple of determined foes, unless you run
and cloak alot.


## LEAVING THE GAME

	To exit Conquest, normally you must self-destruct, or be
killed.  CG's can use QUIT (^\) to exit cleanly, leaving their ship
intact, if somewhat vacant.  If allow_sigquit=true is set in the
system-wide conquestrc file, then any user can exit this way.  If you
exit this way, I'd be careful where you leave your ship.  People who
exit with QUIT and leave their ship running for awhile will still add
to the the elapsed time statistics, even if no-one's playing.  You do
not lose points for self-destructing, though if you do it often, and
don't get any kills before doing so, your skill ranking will probably
suffer.


## TEAMS

	When you first enter Conquest, it will randomly select a team
for you, before bringing you to the main menu.  At this point, you can
switch teams with the (s)witch teams option if you wish.  Remember,
different teams have different strengths and weaknesses.  Federation
and Klingon teams are pretty middle-of-the-road as far as
engine/weapons efficiency goes, while Orions have better engines, and
Romulans have stronger weapons.  I may add an option in the
system-wide conqestrc file to allow CG's to prevent users from
switching teams, if balance (or abuse) becomes an issue.


## COMBAT

	Taking on a robot is quite a bit different from taking on a
human player.  With a robot, in time you learn it's strategy, and
compensate for it.  After you've done it a few hundred times, robots
aren't too much of a challenge, ...if you don't do anything brave and
stupid :-).  Humans on the other hand, tend to adapt to your
strategies, forcing you to come up with new ones.  Surprisingly (or so
it seemed), there are various strategies that can be employed
effectively against your opponent.  A famous one we used to use, is
the lame-duck maneuver.  If you take alot of damage, though you have
plenty of fuel and your weapons are cool, sometimes you can trick a
player into thinking your really hurting...by limping away at warp 2
with your shields down for example.  He'll do an info on you and see
your damaged, or he might think you're out of fuel, and therefore, an
easy kill.  Sometimes you can surprise him ;-) It's simple, but often
effective with a player determined to 'finish you off' carelessly
(right John?).

	Cloaking can be used to excellent effect on an unsuspecting
opponent.  I leave it up to you to explore the possibilities.  


## MACRO KEYS

	The reason I added macros to Conquest, was that at the time I
was starting to play, I used PC emulators like MS-KERMIT to play from
home.  Kermit made it pretty easy to redefine keys, and when you can
have one key that does the work of several keys (such as changing
allocation, firing a spread, and resetting allocation) it was too
useful an ability to ignore.  Secondly, since a player with macros can
be rather formidable to a player without, I thought that Conquest
itself should support a similair ability so that such a disadvantage
wouldn't be an issue.

	Macros are sequences of Conquest commands that are issued when
a Function Key (Fkey) is hit.  On PC hardware, these are the F1-F12
keys.  With certain emulators (like Unixware's at386 console) the
Shifted F1-12 keys (F13-F24) are available too.

	Fkey macros are defined in your ~/.conquestrc file.
Unfortunately, there is no way currently to define Fkeys from within
Conquest.  This will obviously have to be changed eventually to more
easily support public access Conquest servers.

One handy macro I like is 

macro_f1=dP\r

	Which makes my F1 key detonate enemy torps (d), and fire a
spread of 3 torps in the last direction I fired (P\r).  There are many
other interesting and useful combinations that I won't detail... After
all, choosing the right macros and using them well can be an important
part of the strategy you employ against your opponents.


## NAVIGATION

	Using the direction keys ('qweadzxc') to the (k)ourse or
weapons commands can be faster than specifying the direction in
degrees.  If a ship is approaching from 90 degrees, it's easier (and
faster) to type 'Pw\r' than 'P90\r' to fire the torps in the proper
direction.  You're also less likely to screw up in the heat of battle.
See conquest.doc for a description of the direction keys, and how they
work.

	You can set course and lock onto a planet by typing the planet
name (or first 3 unique characters) followed by [TAB] as input to the
(k)ourse command.  You will automatically enter orbit when you get
close enough to your destination.

	In addition, the (i)nfo command understands several special
strings like 'ne' for info on nearest enemy.  Obviously you can't
fire weapons like that though - that would be too easy.  See
conquest.doc for more info.

	The Keypad keys/Arrow keys (if your terminal emulator and
terminfo entry supports them) can be used for 1-key steering, which
can be faster in battle.  They can also be used as input to the fire
and course commands, as they are translated into the appropriate
'direction' keys like so:

	789	 qwe 
	4 6 -->  a d 
	123	 zxc

## DOOMSDAY

	The Doomsday machine (if activated) *can* be killed.  It
probably requires that you've seen the (old) Star Trek episode called
'The Doomsday Machine' though.  Heh.  

	It can also be rather annoying after a time or two though.  If
you get tired of it, you can set the 'no_doomsday' variable in
/opt/conquest/etc/conquestrc file to true, which will prevent it from
randomly starting up and wasting the universe.  I'd recommend this for
public access servers.


### MORE INFO

	More information, a command list/description and some
specifics of the game can be found in conquest.doc.  

	See conqnews.doc for the lastest information on Conquest.

	See TODO for a list of things being planned or thought about.

### OBTAINING CONQUEST

	The latest version of Conquest will always be available from
http://home.rmi.net/~jon.  I also upload updates to the Sunsite and
Freebird archives, where they may be found (currently) at 

	ftp://sunsite.unc.edu/pub/Linux/games/multiplayer/

	and 

	ftp://ftp.freebird.org/unixware/freebird/games/conquest/


### COPYRIGHT INFO

                 C O N Q U E S T   (VAX/VMS Ratfor)

      Copyright (C)1983-1986 by Jef Poskanzer and Craig Leres 
 Permission to use, copy, modify, and distribute this software and 
 its documentation for any purpose and without fee is hereby granted, 
 provided that this copyright notice appear in all copies and in all 
 supporting documentation. Jef Poskanzer and Craig Leres make no 
 representations about the suitability of this software for any 
 purpose. It is provided "as is" without express or implied warranty. 


 Unix/C specific porting and supporting code Copyright (C)1994-1998 
 by Jon Trulson <jon@radscan.com> under the same terms, conditions,  
 and restrictions of the original copyright by Jef Poskanzer and Craig
 Leres.

 (5/1/98)
 Due to a little prodding from Sunsite (;-), I've decided on the
 ARTISTIC LICENSE (see the LICENSE file) Copyright statement for
 Conquest. 

Jon Trulson <jon@radscan.com> 12/24/97


